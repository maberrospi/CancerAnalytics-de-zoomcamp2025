id: ingestion
namespace: zoomcamp.project_cancer

# Can be improved by choosing file instead of hardcoding.
# inputs:
#   - id: filename
#     type: STRING
#     displayName: Input the filename to be ingested.
#     required: true
#     validator: ".*\\.(csv|zip)$"

variables:
  # in_file: "{{inputs.filename}}"# "IHME-GBD_2021_DATA-4dc45cd2-2.zip"
  in_file: "IHME-GBD_2021_DATA-abb097b3-1.zip"
  # out_file: "{{inputs.filename | replace('.zip', '.csv')}}" # "IHME-GBD_2021_DATA-4dc45cd2-2.csv"
  out_file: "IHME-GBD_2021_DATA-abb097b3-1.csv"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/src/{{vars.out_file}}"
  data: "{{outputs.extract_unzip.outputFiles[render(vars.out_file)]}}"
  tmp_table: "{{kv('GCP_DATASET')}}.tmp_ingestion"
  table: "{{kv('GCP_DATASET')}}.tmp_"


tasks:

  # Task 1: Unzip the files
  - id: extract_unzip
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands: 
      - unzip /CancerData/{{render(vars.in_file)}}
    disabled: False


  # Task 2: Upload the unzipped files to GCS
  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_file)}}"
    disabled: False

  # Task 3: Create bq table for raw data
  - id: bq_raw_cancer_data
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.raw_cancer_data`
      (
          record_id BYTES OPTIONS (description = 'A unique identifier for the record, generated by hashing key record attributes.'),
          filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),
          measure_id INT64 OPTIONS (description = 'The id for the measure_name'),
          measure_name STRING OPTIONS (description = 'Measure names include Death, DALYs, Incidence and Prevalence'),
          location_id INT64 OPTIONS (description = 'The id of the country for the record measurements'),
          location_name STRING OPTIONS (description = 'The country for the record measurements'),
          sex_id INT64 OPTIONS (description = 'The id for sex - 1,2,3'),
          sex_name STRING OPTIONS (description = 'Female, male or Both.'),
          age_id INT64 OPTIONS (description = 'The id for the age_name'),
          age_name STRING OPTIONS (description = 'Describes the ages in this measurement. e.g. all_ages'),
          cause_id INT64 OPTIONS (description = 'The id for the cause_name'),
          cause_name STRING OPTIONS (description = 'A single disease or injury or an aggregation of diseases and injuries that causes death or disability'),
          metric_id INT64 OPTIONS (description = 'The id for the metric_name'),
          metric_name STRING OPTIONS (description = 'Metric names is currently only numbers'),
          year INT64 OPTIONS (description = 'The year for the record measurements'),
          val FLOAT64 OPTIONS (description = 'The value of the metric_name related to the measure_name'),
          upper FLOAT64 OPTIONS (description = 'The upper confidence interval value for the metric_name'),
          lower FLOAT64 OPTIONS (description = 'The lower confidence interval value for the metric_name')
      )
      # PARTITION BY  DATE(CAST(year AS STRING) || '-01-01');


  - id: bq_raw_cancer_data_ext
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
      (
          measure_id INT64 OPTIONS (description = 'The id for the measure_name'),
          measure_name STRING OPTIONS (description = 'Measure names include Death, DALYs, Incidence and Prevalence'),
          location_id INT64 OPTIONS (description = 'The id of the country for the record measurements'),
          location_name STRING OPTIONS (description = 'The country for the record measurements'),
          sex_id INT64 OPTIONS (description = 'The id for sex - 1,2,3'),
          sex_name STRING OPTIONS (description = 'Female, male or Both.'),
          age_id INT64 OPTIONS (description = 'The id for the age_name'),
          age_name STRING OPTIONS (description = 'Describes the ages in this measurement. e.g. all_ages'),
          cause_id INT64 OPTIONS (description = 'The id for the cause_name'),
          cause_name STRING OPTIONS (description = 'A single disease or injury or an aggregation of diseases and injuries that causes death or disability'),
          metric_id INT64 OPTIONS (description = 'The id for the metric_name'),
          metric_name STRING OPTIONS (description = 'Metric names is currently only numbers'),
          year INT64 OPTIONS (description = 'The year for the record measurements'),
          val FLOAT64 OPTIONS (description = 'The value of the metric_name related to the measure_name'),
          upper FLOAT64 OPTIONS (description = 'The upper confidence interval value for the metric_name'),
          lower FLOAT64 OPTIONS (description = 'The lower confidence interval value for the metric_name')
      )
      OPTIONS (
          format = 'CSV',
          uris = ['{{render(vars.gcs_file)}}'],
          skip_leading_rows = 1,
          ignore_unknown_values = TRUE
      );

  - id: bq_data_table_tmp
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.tmp_table)}}`
      AS
      SELECT
        MD5(CONCAT(
          COALESCE(CAST(measure_id AS STRING), ""), '-',
          COALESCE(CAST(location_id AS STRING), ""), '-',
          COALESCE(CAST(sex_id AS STRING), ""), '-',
          COALESCE(CAST(age_id AS STRING), ""), '-',
          COALESCE(CAST(cause_id AS STRING), ""), '-',
          COALESCE(CAST(metric_id AS STRING), ""), '-',
          COALESCE(CAST(year AS STRING), "")
        )) AS record_id,
        "{{render(vars.out_file)}}" AS filename,
        *
      FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: bq_data_merge
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.raw_cancer_data` T
      USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.tmp_table)}}` S
      ON T.record_id = S.record_id
      WHEN NOT MATCHED THEN
        INSERT (record_id, filename, measure_id, measure_name, location_id, location_name, sex_id, sex_name,  
                age_id, age_name, cause_id, cause_name, metric_id, metric_name, year, val, upper, lower)  
        VALUES (S.record_id, filename, S.measure_id, S.measure_name, S.location_id, S.location_name, S.sex_id, S.sex_name,  
                S.age_id, S.age_name, S.cause_id, S.cause_name, S.metric_id, S.metric_name, S.year, S.val, S.upper, S.lower); 

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"